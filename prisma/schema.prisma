// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id      Int      @id @default(autoincrement())
  sid     String   @unique
  session String
  expires DateTime
}

model User {
  id              Int           @id @default(autoincrement())
  firstname       String
  lastname        String
  username        String        @unique
  email           String        @unique
  password        String
  role            Role          @default(STUDENT)
  profile_picture String?
  refreshToken    String[]      @unique
  verified        Boolean
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  courses         Course[]
  enrollments     Enrollment[]
  submissions     Submission[]
  quiz_attempts   QuizAttempt[]
}

model Course {
  id                Int            @id @default(autoincrement())
  title             String         @unique
  description       String?
  s3_folder_key     String         @unique @default("")
  price             Float
  thumbnail         String
  introductoryVideo String
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  course_modules    CourseModule[]
  enrollments       Enrollment[]
  announcements     Announcement[]
  Assignment        Assignment[]
  Quiz              Quiz[]
  published         Boolean
  User              User?          @relation(fields: [userId], references: [id])
  userId            Int?
}

model CourseModule {
  id             Int      @id @default(autoincrement())
  title          String   @unique
  description    String?
  s3_folder_key  String?
  course         Course   @relation(fields: [course_id], references: [id])
  course_id      Int
  module_lessons Lesson[]
  quizzes        Quiz[]
}

model Lesson {
  id                   Int                 @id @default(autoincrement())
  title                String
  description          String
  content              String
  completed            Boolean
  s3_folder_key        String?
  course_module        CourseModule        @relation(fields: [moduleId], references: [id])
  moduleId             Int
  lesson_files         LessonFile[]
  lesson_content_files LessonContentFile[]
}

model LessonFile {
  id       Int      @id @default(autoincrement())
  name     String
  url      String
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  lessonId Int
  fileType FILETYPE @default(IMAGE)
}

model LessonContentFile {
  id       Int      @id @default(autoincrement())
  name     String
  url      String
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  lessonId Int
  fileType FILETYPE @default(IMAGE)
}

model Enrollment {
  id          Int           @id @default(autoincrement())
  enrolled_at DateTime      @default(now())
  user        User          @relation(fields: [user_id], references: [id])
  course      Course        @relation(fields: [course_id], references: [id])
  user_id     Int
  course_id   Int
  progress    String?
  certificate String?
  QuizAttempt QuizAttempt[]
}

model Assignment {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  due_date    DateTime
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  course      Course       @relation(fields: [course_id], references: [id])
  course_id   Int
  submissions Submission[]
}

model Submission {
  id            Int        @id @default(autoincrement())
  submission    String?
  submitted_at  DateTime
  created_at    DateTime   @updatedAt
  updated_at    DateTime   @default(now())
  assignment    Assignment @relation(fields: [assignment_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id])
  assignment_id Int
  user_id       Int
}

model Quiz {
  id             Int             @id @default(autoincrement())
  title          String
  description    String?
  timer          Int
  timerOption    QuizTimerOption @default(MINUTES)
  attemptNumber  Int
  passingMarks   Int
  completed      Boolean
  due_date       DateTime?
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  quiz_questions QuizQuestion[]
  quiz_attempts  QuizAttempt[]
  CourseModule   CourseModule?   @relation(fields: [courseModuleId], references: [id])
  courseModuleId Int?
  Course         Course?         @relation(fields: [courseId], references: [id])
  courseId       Int?
}

model QuizQuestion {
  id             Int          @id @default(autoincrement())
  question       String
  question_type  QuestionType @default(SINGLE_CHOICE)
  correct_answer String[]
  quiz           Quiz         @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  quiz_id        Int
  quiz_options   String[]
}

model QuizAttempt {
  id            Int        @id @default(autoincrement())
  // submission_time DateTime
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  progress      String
  quiz          Quiz       @relation(fields: [quiz_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id])
  enrollment    Enrollment @relation(fields: [enrollment_id], references: [id])
  quiz_id       Int
  user_id       Int
  enrollment_id Int
}

model Announcement {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  active     Boolean
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  course     Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  course_id  Int
}

enum Role {
  STUDENT
  ADMIN
}

enum QuestionType {
  TRUE_FALSE
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum QuizTimerOption {
  MINUTES
  SECONDS
}

enum FILETYPE {
  IMAGE
  VIDEO
  ZIP
  AUDIO
}
